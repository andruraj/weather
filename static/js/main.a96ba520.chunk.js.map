{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Form","onSubmit","this","props","getWeather","type","name","placeholder","required","Component","Weather","_props$weather","weather","city","country","desc","humidity","error","temp","API_KEY","App","state","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","sys","description","message","stop","components_Title","Form_Form","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAWeA,EATD,WACV,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,6CCJSE,mLAEb,OACIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,QAAMG,SAAUC,KAAKC,MAAMC,YAC3BR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,KAAK,OAAOC,YAAY,UAAUC,UAAQ,IAC7DZ,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,KAAK,UAAUC,YAAY,aAAaC,UAAQ,IAAGZ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAC3EF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yBAAlB,wBAPkBU,aCAnB,SAASC,EAAQP,GAAO,IAAAQ,EACkBR,EAAMS,QAArDC,EAD6BF,EAC7BE,KAAMC,EADuBH,EACvBG,QAASC,EADcJ,EACdI,KAAMC,EADQL,EACRK,SAAUC,EADFN,EACEM,MAAOC,EADTP,EACSO,KAC5C,OACItB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAChBc,GAAQC,GAAWlB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,sBAAiBF,EAAAC,EAAAC,cAAA,UAAKe,EAAL,KAAaC,IACrDI,GAAQtB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,yBAAoBF,EAAAC,EAAAC,cAAA,UAAKoB,IACrCF,GAAYpB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,sBAAiBF,EAAAC,EAAAC,cAAA,UAAKkB,IACtCD,GAAQnB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,wBAAmBF,EAAAC,EAAAC,cAAA,UAAKiB,IACpCE,GAASrB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAKmB,OCPnC,IAAME,EAAU,mCAEKC,6MACnBC,MAAQ,CACNH,KAAM,GACNL,KAAM,GACNC,QAAS,GACTE,SAAU,GACVD,KAAM,GACNE,MAAO,MAETb,iDAAa,SAAAkB,EAAOC,GAAP,IAAAV,EAAAC,EAAAU,EAAAC,EAAA,OAAAC,EAAA7B,EAAA8B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXP,EAAEQ,iBACElB,EAAOU,EAAES,OAAOC,SAASpB,KAAKqB,MAC9BpB,EAAUS,EAAES,OAAOC,SAASnB,QAAQoB,MAH7BN,EAAAE,KAAA,EAIYK,MAAK,qDAAAC,OAAsDvB,EAAtD,KAAAuB,OAA8DtB,EAA9D,WAAAsB,OAA+EjB,IAJhG,cAILK,EAJKI,EAAAS,KAAAT,EAAAE,KAAA,EAKQN,EAASc,OALjB,OAKLb,EALKG,EAAAS,KAMPxB,GAAQC,GACVyB,QAAQC,IAAIf,GACZgB,EAAKC,SAAS,CACZxB,KAAMO,EAAKkB,KAAKzB,KAChBF,SAAUS,EAAKkB,KAAK3B,SACpBH,KAAMY,EAAKnB,KACXQ,QAASW,EAAKmB,IAAI9B,QAClBC,KAAMU,EAAKb,QAAQ,GAAGiC,YACtB5B,MAAO,MAGTwB,EAAKC,SAAS,CACZxB,KAAM,GACNL,KAAM,GACNC,QAAS,GACTE,SAAU,GACVD,KAAM,GACNE,MAAOQ,EAAKqB,UAvBL,yBAAAlB,EAAAmB,SAAAzB,oIA4BX,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACkD,EAAD,OAEFpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACmD,EAAD,CAAM7C,WAAYF,KAAKE,eAG3BR,EAAAC,EAAAC,cAAA,OAAKC,UAAYG,KAAKmB,MAAMR,MAAQX,KAAKmB,MAAMP,QAAU,oDAAsD,OAC3GlB,EAAAC,EAAAC,cAACY,EAAD,CAASE,QAASV,KAAKmB,kBAjDJZ,aCKbyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a96ba520.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Title = () => {\r\n    return (\r\n        <div className='center-align'>\r\n            <h1>Weather Finder</h1>\r\n            <p>Let's find out today's weather</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Form extends Component {\r\n    render() {\r\n        return (\r\n            <div className='col s9'>\r\n                <form onSubmit={this.props.getWeather} >\r\n                <input type=\"text\" name=\"city\" placeholder='City...' required />\r\n                <input type=\"text\" name=\"country\" placeholder='Country...' required /><br/><br/>\r\n                <button className='btn blue waves-effect'>Get Weather</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Weather(props) {\r\n    let { city, country, desc, humidity, error, temp } = props.weather;\r\n    return (\r\n        <div>\r\n            <div className='container center-align white-text'>\r\n                <table className='highlight'>\r\n                {city && country && <tr><td>Location</td><td>{city}, {country}</td></tr>}\r\n                {temp && <tr><td>Temperature</td><td>{temp}</td></tr>}\r\n                {humidity && <tr><td>Humidity</td><td>{humidity}</td></tr>}\r\n                {desc && <tr><td>Conditions</td><td>{desc}</td></tr>}\r\n                {error && <tr><td>{error}</td></tr>}\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\nimport Title from './components/Title';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = \"4411ce3c496ff3b079ef3de96745265e\";\n\nexport default class App extends Component {\n  state = {\n    temp: '',\n    city: '',\n    country: '',\n    humidity: '',\n    desc: '',\n    error: ''\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    let city = e.target.elements.city.value;\n    let country = e.target.elements.country.value;\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`);\n    const data = await api_call.json();\n    if (city && country) {\n      console.log(data);\n      this.setState({\n        temp: data.main.temp,\n        humidity: data.main.humidity,\n        city: data.name,\n        country: data.sys.country,\n        desc: data.weather[0].description,\n        error: ''\n      });\n    } else {\n      this.setState({\n        temp: '',\n        city: '',\n        country: '',\n        humidity: '',\n        desc: '',\n        error: data.message\n      });\n    }\n  }\n  render() {\n    return (\n      <div className='container'>\n        <div className=\"wbox\">\n          <div className=\"row card-panel white-text pink darken-4 z-depth-3\">\n            <div className=\"col s6\">\n              <Title />\n            </div>\n            <div className=\"col s6\">\n              <Form getWeather={this.getWeather} />\n            </div>\n          </div>\n          <div className={ this.state.city && this.state.country ? 'row card-panel white-text pink darken-4 z-depth-3' : 'row'} >\n              <Weather weather={this.state} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}